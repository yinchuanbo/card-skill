[
  {
    "id": "01",
    "title": "发布订阅模式",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-02-22T21:49:40.000Z",
    "summary": "\r\n### 1. 发布订阅模式是啥？\r\n\r\n简单来说，发布订阅模式就是一种**消息通信机制**。\r\n\r\n- **发布者（Publisher）**\r\n  ：负责发消息。\r\n- **订阅者（Subscriber）**\r\n  ：负责收消息。\r\n- **消息中心（Event Bus）**\r\n  ：负责管理消...",
    "type": "default",
    "url": "/doc/01.html"
  },
  {
    "id": "02",
    "title": "JavaScript 最实用的 10 种设计模式和应用场景",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-03-08T17:49:49.000Z",
    "summary": "\r\n## 1. 单例模式（Singleton Pattern）\r\n\r\n单例模式确保一个类只有一个实例，并提供一个全局访问点，一般应用场景表现在：\r\n\r\n- 全局状态管理（如 Redux 中的 Store）。\r\n- 数据库连接池。\r\n- 日志记录器。\r\n\r\n```js\r\nclass Singleton...",
    "type": "default",
    "url": "/doc/02.html"
  },
  {
    "id": "03",
    "title": "前端文件大小单位转换的最佳实践",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-03-08T17:54:15.000Z",
    "summary": "\r\n## 提高代码优雅度：文件大小单位转换的最佳实践\r\n\r\n在日常开发中，我们经常需要将文件大小从 KB 转换为 MB、GB 甚至 TB，以提供更直观的信息展示。\r\n\r\n今天，我们就来看看如何优雅地实现这一功能，并推荐一种更简洁高效的代码写法。\r\n\r\n## 传统写法：繁琐的 if-else\r\n\r\n`...",
    "type": "default",
    "url": "/doc/03.html"
  },
  {
    "id": "04",
    "title": "一起聊聊 Symbols 在前端的几个妙用",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-03-08T18:09:52.000Z",
    "summary": "\r\n## 1. JavaScript 的 Symbols 有什么用\r\n\r\nSymbols 与其他 JavaScript 原语不同，其保证唯一性。\r\n\r\n当开发者使用 `Symbol('description')` 创建 Symbols 时，其值永远不会与任何其他 Symbols 相同，即使是使用相同...",
    "type": "default",
    "url": "/doc/04.html"
  },
  {
    "id": "05",
    "title": "为何说 AbortController 是前端一把利剑",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-03-08T18:12:26.000Z",
    "summary": "\r\n## 1\\. 通过 AbortController 提前终止 fetch\r\n\r\n首先看一个例子，其使用 AbortController 来实现可以提前中止的 fetch：\r\n\r\n```js\r\nfetchButton.onclick = async () => {\r\n  const control...",
    "type": "default",
    "url": "/doc/05.html"
  },
  {
    "id": "06",
    "title": "Map最佳实践",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-03-08T20:31:37.000Z",
    "summary": "\r\n<img src=\"/images/02.webp\" />\r\n\r\n**「Map」** 映射是一种经典的数据结构类型，其中数据以  **「key/value」**  的键值对形式存在\r\n\r\n|        |                 Map                  |     ...",
    "type": "default",
    "url": "/doc/06.html"
  },
  {
    "id": "07",
    "title": "性能优化-你的瀑布流还不够懒",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-03-08T21:41:27.000Z",
    "summary": "\r\n无限加载的商品瀑布流是电商最场景的最常用、最重要的组件，因此有一个高性能的瀑布流组件就变得无比重要\r\n\r\n## 使用 Grid 布局，赢在起跑线\r\n\r\nGrid 布局实现响应式非常简单，纯 CSS 实现，不依赖 JavaScript，性能优化赢在起点上\r\n\r\n<img src=\"/images/...",
    "type": "default",
    "url": "/doc/07.html"
  },
  {
    "id": "08",
    "title": "VSCode 调试 Vue",
    "tags": [
      "调试"
    ],
    "createdAt": "2025-03-08T22:34:31.000Z",
    "summary": "\r\n## 如何用 VSCode 调试 Vue 项目\r\n\r\n### 开启 sourcemap\r\n\r\n如果你的项目构建工具使用的是  **webpack**, 一定要在  `vue.config.js`  文件中，添加如下配置：\r\n\r\n```js\r\nmodule.exports = {\r\n  confi...",
    "type": "default",
    "url": "/doc/08.html"
  },
  {
    "id": "09",
    "title": "Promise.allSettled",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-03-09T09:50:25.000Z",
    "summary": "\r\n处理异步操作已经成为了 JavaScript 日常编码的核心部分。随着应用复杂度的增加，我们经常需要并发执行多个异步任务并合理处理它们的结果。长期以来，`Promise.all()`  一直是我们处理并发 Promise 的首选方法，但它存在一个致命缺陷：一旦任何一个 Promise 被拒绝（r...",
    "type": "default",
    "url": "/doc/09.html"
  },
  {
    "id": "10",
    "title": "如果一个NPM包部分功能不满足需求，如何修改器部分功能",
    "tags": [
      "工程化"
    ],
    "createdAt": "2025-03-09T10:40:04.000Z",
    "summary": "\r\n对第三方包进行修改以适应特定需求是一个常见的场景。尽管直接修改 node_modules 中的代码是可能的，但这种做法并不推荐，因为这些改动在下次运行 `npm install` 或更新包时会丢失。\r\n\r\n接下来的内容中，我们将来讲解一下处理这种情况的几种推荐方法。\r\n\r\n## 使用 Fork\r...",
    "type": "default",
    "url": "/doc/10.html"
  },
  {
    "id": "11",
    "title": "前端包管理工具 npm、yarn 与 pnpm",
    "tags": [
      "工程化"
    ],
    "createdAt": "2025-03-09T10:42:49.000Z",
    "summary": "\r\n## npm install 发生了什么\r\n\r\n### 1\\. 读取 package.json\r\n\r\n- **解析项目的依赖**：`npm` 首先会读取当前目录下的  `package.json`  文件，以了解项目的基本信息和所需的依赖包列表。这个文件包含了项目的名称、版本、描述、脚本和依赖项...",
    "type": "default",
    "url": "/doc/11.html"
  },
  {
    "id": "12",
    "title": "一次搞懂 CSS 各种混合模式",
    "tags": [
      "CSS"
    ],
    "createdAt": "2025-03-10T20:23:43.000Z",
    "summary": "\r\n## 一. mix-blend-mode\r\n\r\n`mix-blend-mode` 用于设定一个元素如何与其父元素或背景中的其他元素进行混合。常见的应用包括图片和文字在背景上的混合，让内容与背景色彩产生有趣的视觉效果。\r\n\r\n```css\r\ndiv {\r\n  mix-blend-mode: dif...",
    "type": "default",
    "url": "/doc/12.html"
  },
  {
    "id": "13",
    "title": "CSS 滤镜 filter / backdrop-filter：模糊、透明图阴影、调色、毛玻璃、渐进式模糊效果",
    "tags": [
      "CSS"
    ],
    "createdAt": "2025-03-10T21:28:06.000Z",
    "summary": "\r\n## 一. 滤镜 filter\r\n\r\n`filter`属性能让你对 HTML 元素本身做一系列的图像处理效果，让我们能在不使用绘图软体的情况下实现各种特效，例如：模糊、明度、对比度等。\r\n\r\n```css\r\ndiv {\r\n  filter: 方法(数值);\r\n}\r\n```\r\n\r\n### 特效效果...",
    "type": "default",
    "url": "/doc/13.html"
  },
  {
    "id": "14",
    "title": "无限动画CSS工具库",
    "tags": [
      "CSS"
    ],
    "createdAt": "2025-03-13T19:48:06.000Z",
    "summary": "\r\n今天，我们为大家介绍一款强大的 CSS 动画库——**AnimXYZ**，它能够帮助开发者轻松创建、定制和组合动画效果，而无需编写任何关键帧代码。\r\n\r\n<img src=\"/images/03.gif\">\r\n\r\n## 什么是 AnimXYZ？\r\n\r\n**AnimXYZ** 是一个基于 CSS ...",
    "type": "default",
    "url": "/doc/14.html"
  },
  {
    "id": "15",
    "title": "3个非常好用的图标网站",
    "tags": [
      "工具集"
    ],
    "createdAt": "2025-03-13T19:55:06.000Z",
    "summary": "\r\n## 一. iconfont\r\n\r\n最常用的图标站，阿里巴巴出品。\r\n\r\n提供了成千上万的矢量图标，涵盖 UI 设计、APP、网页等多个领域。\r\n\r\n用户可以创建自己的项目，批量管理所需图标，方便在不同项目中复用。\r\n\r\n支持多种使用方式。\r\n\r\n支持多人协作。\r\n\r\nhttps://www.i...",
    "type": "default",
    "url": "/doc/15.html"
  },
  {
    "id": "16",
    "title": "10 个鲜为人知但必备的 NPM 包",
    "tags": [
      "工具集"
    ],
    "createdAt": "2025-03-14T22:25:00.000Z",
    "summary": "\r\n## 1. date-fns-tz：时区处理的终极解决方案\r\n\r\n时区处理一直是开发者的噩梦，尤其是当应用需要支持全球用户时。虽然 Moment.js 曾经是时区处理的首选工具，但  `date-fns-tz`  提供了一个更现代化、轻量级的替代方案。它基于  `date-fns`  库，提供了...",
    "type": "default",
    "url": "/doc/16.html"
  },
  {
    "id": "17",
    "title": "你必须知道的前端性能指标",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-03-14T22:46:05.000Z",
    "summary": "\r\n## 前言\r\n\r\n在当今快速发展的互联网时代，用户体验已成为衡量网站成功的关键因素之一。对于前端开发者来说，了解和优化前端性能指标是提升用户体验的必经之路。\r\n\r\n今天，我们就来聊聊那些影响用户体验的前端性能指标：FCP、LCP、TTFB、FID、TTI、CLS 和 TBT。\r\n\r\n## FCP...",
    "type": "default",
    "url": "/doc/17.html"
  },
  {
    "id": "18",
    "title": "前端项目优化-让网站飞起来的秘籍",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-03-14T22:51:35.000Z",
    "summary": "\r\n在如今这个信息爆炸的时代，前端性能优化已经成为提升用户体验和网站竞争力的关键因素。一个加载迅速、响应灵敏的网站，不仅能吸引更多的用户，还能提高用户留存率和转化率。今天，就让我们一起深入探讨前端项目优化的方方面面，掌握那些能让网站“飞起来”的秘籍。\r\n\r\n## 一、加载时性能优化\r\n\r\n### 按...",
    "type": "default",
    "url": "/doc/18.html"
  },
  {
    "id": "19",
    "title": "如何用 Docker 部署前端项目",
    "tags": [
      "Docker"
    ],
    "createdAt": "2025-03-14T23:10:34.000Z",
    "summary": "\r\n## 前言\r\n\r\n在前端开发中，部署项目往往是一个令人头疼的环节。传统的部署方式不仅复杂，还容易因为环境差异导致各种问题。而 Docker 的出现，为前端项目的部署带来了全新的解决方案。今天，就让我们一起探索如何使用 Docker 部署前端项目，让你的部署过程变得轻松又高效！\r\n\r\n### 一....",
    "type": "default",
    "url": "/doc/19.html"
  },
  {
    "id": "20",
    "title": "前端国际化全场景支持方案，不入侵代码，一键完成 (vue2/3、react)",
    "tags": [
      "工具集"
    ],
    "createdAt": "2025-03-15T08:41:07.000Z",
    "summary": "\r\n## 🚀 前言\r\n\r\n大家好呀！之前给大家介绍过一个关于国际化的 Vite 插件 `vite-plugin-auto-i18n`，这是一个自动翻译的 i18n Vite 插件。但当时这个插件还不够完美。所以，时隔一年，我们带来了前端国际化插件的升级版——更兼容、更适配、更稳定。🎉\r\n\r\n国际...",
    "type": "default",
    "url": "/doc/20.html"
  },
  {
    "id": "21",
    "title": "七行代码搞定无限滚动",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-03-15T09:28:38.000Z",
    "summary": "\r\n无限滚动，又称瀑布流，已成为现代网站的标配。它能提升用户体验，让浏览更加流畅。分享下只需七行 JavaScript 代码，就能轻松实现高性能的无限滚动效果，并深入剖析其背后的性能优化原理。\r\n\r\n## 传统实现的痛点\r\n\r\n在谈论优化方案前，我们先来看看传统无限滚动实现中存在的问题：\r\n\r\n1....",
    "type": "default",
    "url": "/doc/21.html"
  },
  {
    "id": "22",
    "title": "告别 React 性能瓶颈",
    "tags": [
      "React",
      "性能"
    ],
    "createdAt": "2025-03-15T18:11:08.000Z",
    "summary": "\r\n## 1\\. 分析和监控性能\r\n\r\n使用工具找出瓶颈：\r\n\r\n- React DevTools：检查组件层次结构，识别重新渲染问题。\r\n\r\n```sh\r\nnpm install --save-dev @react-devtools/extension\r\n```\r\n\r\n在浏览器中使用它来检查不必要...",
    "type": "default",
    "url": "/doc/22.html"
  },
  {
    "id": "23",
    "title": "HTML 中的 JavaScript",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-03-15T20:37:45.000Z",
    "summary": "\r\n## script 元素\r\n\r\n**script 元素有下列 8 个属性：**\r\n\r\n### 1. async:\r\n\r\n可选，表示应该立即下载脚本，但不能妨碍页面上的其他操作，比如下载资源或等待其他脚本加载，这个属性只对外部脚本文件有效。\r\n\r\n### 2. charset:\r\n\r\n可选，使用 ...",
    "type": "default",
    "url": "/doc/23.html"
  },
  {
    "id": "25",
    "title": "原生 Observable API 来了",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-03-18T20:32:01.000Z",
    "summary": "\r\n在 Web 开发中，异步事件处理始终是构建响应式、可扩展应用的核心挑战。传统方案依赖`addEventListener`进行事件监听，但在处理复杂事件流时，其命令式编程模型常导致代码臃肿、难以维护且缺乏组合性。尽管开发者通常通过 RxJS 等响应式编程库解决此类问题，但这些第三方方案需要额外学习...",
    "type": "default",
    "url": "/doc/25.html"
  },
  {
    "id": "26",
    "title": "Grid布局详解-掌握网页布局的终极武器",
    "tags": [
      "CSS"
    ],
    "createdAt": "2025-03-18T20:57:14.000Z",
    "summary": "\r\n## 一. Grid 布局基础概念\r\n\r\n**Grid 布局（网格布局）** 是 CSS 中一种二维布局模型，允许开发者通过行（Row）和列（Column）的组合，将页面划分为多个区域，并精准控制元素的位置和尺寸。它的核心特点是同时管理行和列，适合构建复杂且结构化的布局。\r\n\r\n<img src...",
    "type": "default",
    "url": "/doc/26.html"
  },
  {
    "id": "27",
    "title": "前端异常隔离 Proxy、Web Workers 与 iframe 的深度对比",
    "tags": [
      "JavaScript",
      "异常"
    ],
    "createdAt": "2025-03-20T19:36:42.000Z",
    "summary": "\r\n在插件化架构中，**异常隔离**是保障系统稳定性的核心机制。通过隔离插件与宿主环境，即使单个插件崩溃，也不会影响整体系统运行。\r\n\r\n在前端开发中，异常隔离是保障应用稳定性的核心需求，尤其是在处理第三方脚本、插件或不可信代码时。本文将从 **实现原理**、**隔离级别**、**性能开销** 和 ...",
    "type": "default",
    "url": "/doc/27.html"
  },
  {
    "id": "30",
    "title": "使用 GitDiagram 让你几秒钟读懂开源项目架构",
    "tags": [
      "工具集"
    ],
    "createdAt": "2025-03-31T21:15:42.000Z",
    "summary": "\r\n## 项目概述\r\n\r\nGitDiagram 是一款革命性的开源工具，能够在几秒钟内将任何 GitHub 存储库转换为精美的**可视化交互式图表**。由开发者 Ahmed Khaleel 创建，该项目完美结合了 AI 技术与现代 Web 开发栈，为开发者提供了一种全新的代码库探索方式。\r\n\r\n##...",
    "type": "default",
    "url": "/doc/30.html"
  },
  {
    "id": "31",
    "title": "JS 原生深拷贝 structuredClone",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-04-08T21:10:33.000Z",
    "summary": "\r\n过去要进行对象深拷贝，往往需要 JSON 转换或第三方库。如今，现代 JavaScript 内置了 structuredClone，可直接生成对象的深层副本。\r\n\r\n```js\r\nconst deploymentConfig = {\r\n  provider: \"Sevalla\",\r\n  regi...",
    "type": "default",
    "url": "/doc/31.html"
  },
  {
    "id": "32",
    "title": "停止过度使用Console.log",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-04-10T21:06:03.000Z",
    "summary": "\r\n作为开发人员，过度使用 console.log()来快速调试代码是很诱人的。虽然这似乎是诊断问题的最快方法，但从长远来看，它可能会减慢您的速度、使您的代码混乱并限制您的见解。好消息是，JavaScript 的 console 对象提供了许多比 console.log()  更强大的方法，它们可以...",
    "type": "default",
    "url": "/doc/32.html"
  },
  {
    "id": "33",
    "title": "前端利器 Dinero.js：彻底告别 0.1+0.2 精度噩梦，优雅处理多币种",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-04-14T14:22:03.000Z",
    "summary": "\r\n大家有没有在开发中，有没有遇到过 `0.1 + 0.2` 结果不是 `0.3` 这种“灵异事件”时，尤其是在需要精确到分的金融或电商场景，麻烦就来了。支付金额算错、优惠券对不上、财务对账抓狂……这些都可能是 JavaScript 数字类型的“天生缺陷”。\r\n\r\n**为什么 JavaScript ...",
    "type": "default",
    "url": "/doc/33.html"
  },
  {
    "id": "34",
    "title": "7 个代替 setTimeout 的方案，让定时任务更可靠",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-04-14T14:41:03.000Z",
    "summary": "\r\n`setTimeout`是我们经常使用的定时器 API，它允许我们延迟执行代码。但在实际应用中，`setTimeout`存在一些局限性和潜在问题，比如精度不高、在页面不活跃时可能被节流等。分享 7 种替代方案，让我们的定时任务更加可靠和高效。\r\n\r\n## 1\\. requestAnimation...",
    "type": "default",
    "url": "/doc/34.html"
  },
  {
    "id": "35",
    "title": "只需一行代码，任意网页秒变可编辑",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-04-14T15:07:03.000Z",
    "summary": "\r\n在我们日常工作中，可能会遇到截图页面的场景，有时页面有些内容不符合要求，我们可能需要进行一些数值或内容的修改。如果你会 PS，修改内容难度不高，如果你是前端，打开控制台也能通过修改 dom 的方式进行简单的文字修改。\r\n\r\n今天，我就来分享一个冷门又实用的前端技巧 —— 只需一行 JavaScr...",
    "type": "default",
    "url": "/doc/35.html"
  },
  {
    "id": "36",
    "title": "8 个面向前端方向的 AI 编程助手",
    "tags": [
      "AI"
    ],
    "createdAt": "2025-04-14T17:02:03.000Z",
    "summary": "\r\n## 1\\. Webcrumbs — 使用 TailwindCSS 即时生成组件\r\n\r\n<img src=\"/images/71.webp\" />\r\n\r\n官网地址：https://www.webcrumbs.org/frontend-ai\r\n\r\nWebcrumbs 的 Frontend AI 是...",
    "type": "default",
    "url": "/doc/36.html"
  },
  {
    "id": "37",
    "title": "AI 驱动的浏览器自动化神器 Nanobrowser",
    "tags": [
      "AI"
    ],
    "createdAt": "2025-04-14T17:18:03.000Z",
    "summary": "\r\n推荐一款**颠覆传统网页操作的 AI 神器——Nanobrowser**！它能让你的浏览器像“自动驾驶”一样，自动完成数据抓取、比价下单、竞品分析等高难度任务，彻底解放双手！\r\n\r\n<img src=\"/images/81.webp\" />\r\n\r\n### **Nanobrowser 的核心特点*...",
    "type": "default",
    "url": "/doc/37.html"
  },
  {
    "id": "38",
    "title": "内联资源对页面性能究竟有什么影响？",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-04-15T17:26:03.000Z",
    "summary": "\r\n> Web 开发中，优化页面性能非常重要。内联资源（如 CSS、JavaScript 和图片）是一种常见的优化方式，但它既有优势，也伴随着潜在的缺点。深入理解其影响，可以帮助我们在实际开发中做出更合理的技术决策。\r\n\r\n## 一. 什么是内联资源？\r\n\r\n内联资源是指将 CSS、JavaScri...",
    "type": "default",
    "url": "/doc/38.html"
  },
  {
    "id": "39",
    "title": "Ai 工具 Cursor 无限续杯",
    "tags": [
      "Cursor"
    ],
    "createdAt": "2025-05-13T15:43:25.000Z",
    "summary": "\r\n## Cursor 无限续杯的方法\r\n\r\n- step1: cursor 软件退出登录\r\n\r\n- step2: cursor 网页端删除账号\r\n\r\n- step3: 运行命令（注意：用管理员身份运行 windows powershell）\r\n\r\n**window:**\r\n\r\n```bash\r\ni...",
    "type": "default",
    "url": "/doc/39.html"
  },
  {
    "id": "40",
    "title": "用 Cursor 还在被 AI 乱改代码？你可能没用对 Rules",
    "tags": [
      "Cursor"
    ],
    "createdAt": "2025-05-13T15:51:58.000Z",
    "summary": "\r\n## 什么是 Cursor Rules？\r\n\r\nCursor Rules 本质上是一个规则文件。因为我们在用 AI 时，上下文不会一直保持，Rules 文件则能提供持久且可复用的上下文，每次与模型对话时都会自动附带。\r\n\r\nCursor Rules 目前有三种类型：\r\n\r\n- Project R...",
    "type": "default",
    "url": "/doc/40.html"
  },
  {
    "id": "41",
    "title": "通过 llms.txt 文件让 AI 更容易的收录你的网站内容",
    "tags": [
      "SEO"
    ],
    "createdAt": "2025-05-14T17:39:58.000Z",
    "summary": "\r\n最近团队在验证给独立站加上 llms.txt 用来校验 AI 友好型的测试，说白了就是，让 AI 更容易的爬取你的网站，好让你的网站，你的品牌更容易的出现在 AI 的搜索结果中。\r\n\r\n# 关于 LLMS.TXT 标准的解析\r\n\r\n## 概念定义\r\n\r\nLLMS.TXT 是一项正处于提案阶段的网...",
    "type": "default",
    "url": "/doc/41.html"
  },
  {
    "id": "42",
    "title": "2025 年十大 CSS 新特性：已在所有主流浏览器中支持",
    "tags": [
      "CSS"
    ],
    "createdAt": "2025-05-15T10:48:58.000Z",
    "summary": "\r\n## 1\\. Scrollbar-Gutter 和 Scrollbar-Color\r\n\r\n当浏览器显示滚动条时，布局可能会因为滚动条的出现而发生偏移。使用  `scrollbar-gutter`，可以在开始滚动之前就保留滚动条空间，从而避免这种布局变化：\r\n\r\n```css\r\n.scrollab...",
    "type": "default",
    "url": "/doc/42.html"
  },
  {
    "id": "43",
    "title": "流式 HTML：那个没人告诉你的前端性能黑科技",
    "tags": [
      "HTML"
    ],
    "createdAt": "2025-05-15T11:08:58.000Z",
    "summary": "\r\n你辛苦做了个漂亮的前端应用，在本地测试飞快，但一上线就卡到怀疑人生。用户点一下，毫无反应；等你的应用终于苏醒，用户早就跑了。\r\n\r\n今天咱们就聊聊，为什么你的网站加载还是这么慢——并介绍一个神奇的技巧：**流式 HTML（Streaming HTML）**。\r\n\r\n接下来，我们通过一个真实案例（...",
    "type": "default",
    "url": "/doc/43.html"
  },
  {
    "id": "44",
    "title": "一份完整的「前端性能优化」手册",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-15T17:02:58.000Z",
    "summary": "\r\n我们将深入探讨前端性能优化的各个方面，包括但不限于**衡量性能指标、编程技巧、资源加载、代码分割、懒加载、缓存策略等**。\r\n\r\n<img src=\"./images/95.webp\" />\r\n\r\n## 一、衡量前端性能\r\n\r\n要做前端性能优化，首要工作是**分析和衡量**页面内容，找出网站中需...",
    "type": "default",
    "url": "/doc/44.html"
  },
  {
    "id": "45",
    "title": "React Scheduler - 时间切片",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-15T17:18:58.000Z",
    "summary": "\r\n## 前言\r\n\r\nReact `Fiber` 架构下使用 `Scheduler` 调度器特性 -「时间切片」进行「任务调度」，即：每执行一段时间的任务，就把主线程交还给浏览器，避免长时间占用主线程。\r\n\r\n试想，触发一次 React 更新动作，会经过 `Reconciler` 调和阶段进行 Di...",
    "type": "default",
    "url": "/doc/45.html"
  },
  {
    "id": "46",
    "title": "React Scheduler - 优先级调度",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-15T17:23:58.000Z",
    "summary": "\r\n## 开篇\r\n\r\nScheduler 调度器的核心除了「时间切片」`requestHostCallback` 外，还有一个功能就是「优先级调度」。\r\n\r\n它会根据任务的优先级（任务设定的过期时间）决定先执行哪个任务。为了更快捷地查找到最高优先级任务，采用了数据结构「小顶堆」来存储任务。\r\n\r\n另...",
    "type": "default",
    "url": "/doc/46.html"
  },
  {
    "id": "47",
    "title": "2025年 WebAssembly 如何解 JavaScript 多线程难题？",
    "tags": [
      "WebAssembly"
    ],
    "createdAt": "2025-05-19T10:10:58.000Z",
    "summary": "\r\n## 前言\r\n\r\n开发者都知道 JavaScript 是单线程的，即只有一个调用栈和堆，所有代码都在浏览器渲染进程的主线程中执行，当然也包括本文的主角，即 WebAssembly。\r\n\r\n虽然 WebAssembly 由高级语言编译而成，而且执行速度比 JavaScript 要快得多。然而，如果...",
    "type": "default",
    "url": "/doc/47.html"
  },
  {
    "id": "48",
    "title": "告别 node_modules 迷宫！Vue 团队成员新作让依赖管理爽到飞起",
    "tags": [
      "工具集"
    ],
    "createdAt": "2025-05-19T10:26:58.000Z",
    "summary": "\r\n## 一、node_modules：前端开发者的“甜蜜负担”\r\n\r\n想象一下，你接手一个大型前端项目，打开`node_modules`文件夹时，眼前是密密麻麻的文件夹和文件，宛如进入一座没有地图的迷宫。这个平均占据项目 60%存储空间的庞然大物，却藏着无数隐形炸弹：\r\n\r\n- **依赖冲突**\r...",
    "type": "default",
    "url": "/doc/48.html"
  },
  {
    "id": "49",
    "title": "要知道的技术网站",
    "tags": [
      "工具集"
    ],
    "createdAt": "2025-05-19T13:05:58.000Z",
    "summary": "\r\n## 1、[gs.statcounter.com/](https://gs.statcounter.com/)\r\n\r\n全球浏览器份额占比数据查询网站主页如下：\r\n\r\n<img src=\"./images/107.webp\" />\r\n\r\n网站可以查阅 PC 端浏览器占比份额，也可以查询移动端占比份...",
    "type": "default",
    "url": "/doc/49.html"
  },
  {
    "id": "50",
    "title": "写 TypeScript 必须改掉的16个坏习惯",
    "tags": [
      "TypeScript"
    ],
    "createdAt": "2025-05-19T13:22:58.000Z",
    "summary": "\r\n## 前言\r\n\r\nTypeScript 在前端项目中已经是标配，使用 TypeScript 有很多好处，它让 JavaScript 拥有了强大的类型系统。\r\n\r\n由于 JavaScript 本身是弱类型，很多前端开发人员并没有类型概念，对类型系统理解不深，常常走了不少弯路。本文总结了 16 个最...",
    "type": "default",
    "url": "/doc/50.html"
  },
  {
    "id": "51",
    "title": "为什么react需要fiber架构，而vue不需要？",
    "tags": [
      "React"
    ],
    "createdAt": "2025-05-19T13:30:58.000Z",
    "summary": "\r\n这是一个非常好的问题，涉及到了 React 和 Vue 的底层架构设计理念差异。我们可以从几个维度来理解为什么 **React 需要 Fiber 架构**，而 **Vue（特别是 Vue 2 和 Vue 3）目前不需要类似 Fiber 的架构**。\r\n\r\n---\r\n\r\n## 一、什么是 Reac...",
    "type": "default",
    "url": "/doc/51.html"
  },
  {
    "id": "52",
    "title": "9 个被低估的 CSS 特性",
    "tags": [
      "CSS"
    ],
    "createdAt": "2025-05-19T14:01:58.000Z",
    "summary": "\r\n在 CSS 的浩瀚宇宙中，聚光灯下的明星属性固然耀眼，但那些藏在规范角落的「小众特性」，往往才是提升开发效率的秘密武器。它们就像隐藏的工具箱，能帮我们用更少的代码实现更细腻的交互，让界面开发从繁琐走向优雅。\r\n\r\n今天，就为大家解锁**9 个被严重低估的 CSS 特性**，这些宝藏属性不仅能简化...",
    "type": "default",
    "url": "/doc/52.html"
  },
  {
    "id": "53",
    "title": "9 个高级前端必会的性能优化 API",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-19T14:19:58.000Z",
    "summary": "\r\n## requestIdleCallback\r\n\r\n`requestIdleCallback` 是 **浏览器提供的 API**，用于在 **浏览器空闲时执行低优先级任务**，不会阻塞主线程，也不会影响动画和用户交互。\r\n\r\n### 使用场景\r\n\r\n1.  **非紧急任务**（如日志上报、数据同...",
    "type": "default",
    "url": "/doc/53.html"
  },
  {
    "id": "54",
    "title": "为什么大厂都在用语义化标签？",
    "tags": [
      "HTML"
    ],
    "createdAt": "2025-05-19T14:56:58.000Z",
    "summary": "\r\n在现代前端开发中，HTML 不仅仅是一种标记语言，更是构建可读性强、结构清晰、语义明确网页的基础。而**语义化标签（Semantic Tags）** 正是 HTML5 引入的重要特性之一，它让开发者能够更自然地描述页面内容的结构和意义。\r\n\r\n本文将从以下几个方面详细介绍 HTML 语义化标签：...",
    "type": "default",
    "url": "/doc/54.html"
  },
  {
    "id": "55",
    "title": "新一代图片格式 AVIF，对比 WebP/JPEG 有多强？",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-19T15:17:37.000Z",
    "summary": "\n## 1️⃣ AVIF 格式优势一览\n\n- 📦 **更高压缩率**：同等画质下，体积远小于 WebP 和 JPEG。\n- 🌈 **更好画质**：低码率下细节保留更好，压缩痕迹更少。\n- 🧊 **支持透明通道**：媲美 PNG，体积更小。\n- 🎞️ **支持动画**：媲美 GIF/WebP ...",
    "type": "default",
    "url": "/doc/55.html"
  },
  {
    "id": "56",
    "title": "Vue 首屏优化终极指南",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-19T15:26:33.000Z",
    "summary": "\n## 🌟 开篇：为什么你的 Vue 应用首屏总在转圈？\n\n## 2023 年权威报告显示，**首屏加载时间每增加 1 秒，用户流失率提升 11%** 。但 Vue 单页应用（SPA）常因打包体积过大、资源加载阻塞等问题，导致用户面对\"白屏焦虑\"。\n\n## 🔍 性能诊断用数据说话\n\n1. **L...",
    "type": "default",
    "url": "/doc/56.html"
  },
  {
    "id": "57",
    "title": "TypeScript 的5个好用技巧",
    "tags": [
      "TypeScript"
    ],
    "createdAt": "2025-05-19T15:39:24.000Z",
    "summary": "\n## 1\\. 使用 const 断言锁定类型，确保对象的属性不可更改。\n\n可能你们在编码的时候也遇到过这样的情况，我们定义的接口类型被莫名其妙的修改了导致代码的报错，这样的情况会浪费我们很多不必要的时间来排查 bug。那我们应该如何杜绝这种情况的发生呢，这时 const 断言就派上用场了！使用 `...",
    "type": "default",
    "url": "/doc/57.html"
  },
  {
    "id": "58",
    "title": "因网速太慢我把 20M+ 的字体压缩到了几 KB",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-19T16:03:58.000Z",
    "summary": "\n## 故事背景\n\n事情起源于之前做的海报编辑器，自己调试时无意中发现字体渲染好慢，第一反应就是网怎么变慢了，断网了？仔细一看才发现，淦！这几个字体资源咋这么大，难怪网速变慢了呢 😁😁。\n\n<img src=\"/images/01.awebp\" />\n\n图片中的海报包含 6 种字体，其中最大的字...",
    "type": "default",
    "url": "/doc/58.html"
  },
  {
    "id": "59",
    "title": "如何提高前端应用的性能？",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-19T17:00:55.000Z",
    "summary": "\n## 如何提高前端应用的性能\n\n### 1\\. 代码优化\n\n**1.1 减少不必要的 DOM 操作**\n\n```js\n// 差: 频繁操作DOM\nfor (let i = 0; i < 100; i++) {\n  document.getElementById(\"list\").innerHTML ...",
    "type": "default",
    "url": "/doc/59.html"
  },
  {
    "id": "60",
    "title": "10 个 TypeScript 神仙技巧",
    "tags": [
      "TypeScript"
    ],
    "createdAt": "2025-05-19T17:06:33.000Z",
    "summary": "\n### 引言\n\n在前端开发的江湖里，TypeScript 早已成为攻城略地的神兵利器！它不仅能让代码更健壮、更易维护，还能帮你轻松驾驭复杂业务逻辑。然而，很多前端工程师在使用 TypeScript 时，常常只掌握了基础语法，那些能大幅提升开发效率、解决实际难题的高阶技巧却鲜为人知。今天，我就来分享...",
    "type": "default",
    "url": "/doc/60.html"
  },
  {
    "id": "61",
    "title": "深度解析 content-visibility：浏览器渲染管线的终极优化利器",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-19T17:19:20.000Z",
    "summary": "\n在前端性能优化的战场上，`content-visibility` 是近年来最具突破性的 CSS 属性之一。它不仅改变了开发者对可见性控制的理解，更直接对浏览器的**渲染管线**产生了深远的影响。本文将深入探讨 `content-visibility` 的底层原理、渲染流程影响，并结合实际使用场景，...",
    "type": "default",
    "url": "/doc/61.html"
  },
  {
    "id": "62",
    "title": "ESLint 也接入了 AI",
    "tags": [
      "工程化"
    ],
    "createdAt": "2025-05-20T09:53:44.000Z",
    "summary": "\n在之前的文章中有分享过  [🔗Vite 是首个接入 AI 能力的构建工具](https://mp.weixin.qq.com/s?__biz=MzUzNTk3MjE2Ng==&mid=2247516697&idx=1&sn=1a5ad4899624ef87a290ecc07ff18093&sce...",
    "type": "default",
    "url": "/doc/62.html"
  },
  {
    "id": "63",
    "title": "落地前端监控",
    "tags": [
      "监控"
    ],
    "createdAt": "2025-05-21T10:00:45.000Z",
    "summary": "\n在大型项目中，**前端监控** 是不可或缺的一部分。它的优势可以体现在以下场景：\n\n1.  **稳定性**：尽早发现程序运行错误并及时修复；\n2.  **用户体验**：性能监控分析，持续优化改善网站使用体验；\n3.  **业务扩展**：常见的数据埋点，如统计 PV 页面浏览量。\n\n其中 **稳定性...",
    "type": "default",
    "url": "/doc/63.html"
  },
  {
    "id": "64",
    "title": "整理了ES7到ES14的新特性",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-05-21T10:11:29.000Z",
    "summary": "\n## ES7（ECMAScript2016）\n\n## Array.prototype.includes()\n\n判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 `true`，否则返回 `false`。\n\n该方法有两个参数，第一个参数为要查找的值，第二个参数（可选）是开始搜索的索引（默认从...",
    "type": "default",
    "url": "/doc/64.html"
  },
  {
    "id": "65",
    "title": "聊一聊前端如何实现灰度发布",
    "tags": [
      "部署"
    ],
    "createdAt": "2025-05-21T11:05:26.000Z",
    "summary": "\n前端灰度发布是通过逐步开放新功能给特定用户群体，以降低全量发布风险的技术方案。以下是结合业务场景的常见实现方案及技术要点：\n\n---\n\n## 一、核心实现方案对比\n\n| **方案类型**       | **实现原理**                                       ...",
    "type": "default",
    "url": "/doc/65.html"
  },
  {
    "id": "66",
    "title": "前端脚手架",
    "tags": [
      "工程化"
    ],
    "createdAt": "2025-05-21T11:14:11.000Z",
    "summary": "\n## 背景\n\n在现代前端开发中，脚手架工具（CLI）在团队项目中扮演着重要角色。我们的团队在项目开发中面临以下挑战：\n\n- 开发效率低：项目初始化、代码生成和重复性操作耗费了大量时间。\n- 缺乏统一规范：不同成员的代码风格不一致，提交记录混乱，影响项目质量。\n- 构建部署复杂：手动构建和部署容易出...",
    "type": "default",
    "url": "/doc/66.html"
  },
  {
    "id": "67",
    "title": "前端工程师必知的 MCP 秘籍：从渲染优化到性能飞跃",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-21T11:23:01.000Z",
    "summary": "\n## 🔍 什么是 MCP？为什么前端要关注？\n\n**MCP（Main-Thread Computing Performance）** 指的是浏览器主线程的计算性能，它直接影响页面的**流畅度**、**响应速度**和**用户体验**。\n\n作为前端工程师，你可能经常遇到这些问题：\n\n- **页面卡顿...",
    "type": "default",
    "url": "/doc/67.html"
  },
  {
    "id": "68",
    "title": "10 个现代 CSS 技巧",
    "tags": [
      "CSS"
    ],
    "createdAt": "2025-05-22T10:27:34.000Z",
    "summary": "\n## 1. **使用  `clamp()`  实现响应式字体大小**\n\n`clamp()`  函数可以让你轻松实现响应式字体大小，避免手动编写复杂的媒体查询。\n\n```css\nh1 {\n  font-size: clamp(1.5rem, 5vw, 3rem);\n}\n```\n\n**解释**：`cl...",
    "type": "default",
    "url": "/doc/68.html"
  },
  {
    "id": "69",
    "title": "vite 详细打包配置，包含性能优化、资源处理...",
    "tags": [
      "工程化"
    ],
    "createdAt": "2025-05-22T10:30:15.000Z",
    "summary": "\n## 一、以下是针对 Vite 项目的详细打包配置补充，包含性能优化、资源处理和特殊需求配置：\n\n---\n\n### vite.config.ts 完整打包配置示例\n\n```javascript\nimport { defineConfig, loadEnv } from \"vite\";\nimport...",
    "type": "default",
    "url": "/doc/69.html"
  },
  {
    "id": "70",
    "title": "前端内存泄漏：你的JS代码在偷偷“吃”内存",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-22T10:41:50.000Z",
    "summary": "\n> “内存泄漏？我的浏览器那么多内存，管他呢！”  \n> “哥，等你页面打开半小时，Chrome 开始吃掉你所有的 RAM，你就知道怕了……”\n\n你有没有遇到过这样的问题：你的 Web 应用在刚启动时运行流畅，但使用一段时间后，变得越来越卡？任务管理器一打开，浏览器占用的内存高得离谱，就像一头无底...",
    "type": "default",
    "url": "/doc/70.html"
  },
  {
    "id": "71",
    "title": "计算白屏时间",
    "tags": [
      "性能"
    ],
    "createdAt": "2025-05-22T10:50:21.000Z",
    "summary": "\n## 深入理解白屏时间及其优化策略\n\n在前端性能优化中，白屏时间（First Paint Time）是一个非常重要的指标。它指的是从用户输入网址并按下回车键，到浏览器开始渲染页面内容的时间段。在这段时间内，用户看到的只是一个空白页面，因此白屏时间的长短直接影响了用户的体验。本文将详细探讨白屏时间的...",
    "type": "default",
    "url": "/doc/71.html"
  },
  {
    "id": "72",
    "title": "按位操作符助你写出高效、优雅、不可思议的代码",
    "tags": [
      "JavaScript"
    ],
    "createdAt": "2025-05-22T11:02:21.000Z",
    "summary": "\n## 一、什么是按位操作符，凭什么说它高效？\n\n按位操作符，顾名思义，就是直接操作二进制位的运算符。相比普通的加减乘除直接对数字操作，按位运算对底层**比特位**动刀，用极低的“计算成本”达成惊艳的效果，比如数据加密、权限位、极致性能优化等。\n\n---\n\n## 二、重温基础：七大必杀技一看就会\n\n...",
    "type": "default",
    "url": "/doc/72.html"
  }
]